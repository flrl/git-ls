#!/usr/bin/env perl
# list files and their git properties

use warnings;
use strict;
use 5.012;

use open ':encoding(UTF-8)';

use Date::Format;

my %tagcache;
my %commitcache;
my %filecache;

sub ansic
{
    return "\033["
           . join(';', map { int $_ } @_)
           . 'm';
}

sub commit_colour
{
    my ($sha1) = @_;
    my $c0 = substr($sha1, 0, 1) eq '^' ? 1 : 0;

    no warnings 'portable'; # quiet 64 bit ints please
    return (38, 5, 17 + hex(substr($sha1, $c0, 16)) % 214);
}

sub find_files
{
    my @files;

    foreach my $path (@_) {
        if (-d $path) {
            opendir(my $dh, $path) || die "openddir $path: $!";
            while (readdir $dh) {
                next if $_ eq q{.} or $_ eq q{..};
                next if $_ eq q{.git};
                push @files, $path eq q{.} ? $_ : "$path/$_";
            }
            closedir $dh;
        }
        else {
            push @files, $path;
        }
    }

    return @files;
}

sub cache_file_info
{
    my ($path) = @_;

    my ($sha1, undef) = qx{git rev-list -n1 HEAD -- $path};

    if ($sha1) {
        if (not exists $commitcache{$sha1}) {
            my ($info, undef) = qx{git show --pretty=tformat:%an%x09%ci $sha1};
            chomp $info;
            my ($author_name, $commit_date) = split /\t/, $info;

            $commitcache{$sha1} = {
                'author_name' => $author_name,
                'commit_date' => $commit_date,
            };
        }
    }

    if (not exists $filecache{$path}) {
        $filecache{$path}->{sha1} = $sha1;

        my ($status, undef) = qx{git status --porcelain -- $path};

        if ($status) {
            ($status) = split / /, $status;

            if ($status eq '??') {
                $filecache{$path}->{untracked} = 1;
            }
            else {
                $filecache{$path}->{modified} = 1;
            }
        }
    }

    return;
}

sub list_file
{
    my ($path) = @_;

    my $sha1 = $filecache{$path}->{sha1};
    my $tag = $sha1 ? $tagcache{$sha1} : undef;
    my $commit = $sha1 ? $commitcache{$sha1} : undef;

    if ($filecache{$path}->{modified}) {
        $sha1 = '0' x 40;
        $commit->{author_name} = 'Not Committed Yet';
        $commit->{commit_date} = time2str('%Y-%m-%d %H:%M:%S %z',
                                            (stat($path))[9]);
    }

    if ($commit) {
        print ansic(commit_colour($sha1));
        printf '%-12.12s %-19.19s %s ',
               $tag // $sha1,
               $commit->{author_name},
               $commit->{commit_date};
        print ansic(0);

        print $path, "\n";
    }
    elsif ($filecache{$path}->{untracked}) {
        print ansic(31);
        printf '%-59s', 'untracked';
        print ansic(0);
        print $path, "\n";
    }
    else {
        # no sha1 but also no status: must be an ignored file
    }
}

binmode STDOUT, ":encoding(UTF-8)";

# load and cache tags
open(my $gtpipe, '-|',
        'git', 'tag', '-l', '--format=%(objectname) %(refname:lstrip=2)')
    or die "cannot exec git tag: $!";
while (<$gtpipe>) {
    chomp;
    my ($sha1, $tag) = split /\s+/, $_, 2;
    $tagcache{$sha1} = $tag;
}
close $gtpipe;

my @files = find_files('.');
cache_file_info($_) for @files;
list_file($_) for @files;
